use crate::report::Report;
use solidity::ast::*;
use std::{cell::RefCell, io, rc::Rc};

pub struct NodeModulesImportsVisitor {
    report: Rc<RefCell<Report>>,
}

impl NodeModulesImportsVisitor {
    pub fn new(report: Rc<RefCell<Report>>) -> Self {
        Self { report }
    }
}

impl AstVisitor for NodeModulesImportsVisitor {
    fn visit_import_directive<'a>(
        &mut self,
        context: &mut ImportDirectiveContext<'a>,
    ) -> io::Result<()> {
        if context.import_directive.file.contains("../node_modules") {
            self.report.borrow_mut().add_entry(
                context.current_source_unit.absolute_path.clone().unwrap_or_else(String::new),
                Some(context.current_source_unit.source_line(context.import_directive.src.as_str())?),
                format!("Unnecessary relative node_modules import: `{}`", context.import_directive.file),
            );
        }

        Ok(())
    }
}
